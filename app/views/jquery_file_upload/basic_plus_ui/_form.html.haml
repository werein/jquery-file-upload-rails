/ The file upload form used as target for the file upload widget
= form_for file, html: { multipart: true, class: 'fileupload' } do |f|
  / The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload
  .row.fileupload-buttonbar
    .col-lg-7
      / The fileinput-button span is used to style the file input field as button
      %span.btn.btn-success.fileinput-button
        %i.glyphicon.glyphicon-plus
        %span= t '.add_files'
        - if defined?(as)
          = f.file_field as, multiple: true
        - else
          = f.file_field :file, multiple: true
      %button.btn.btn-primary.start{type: 'submit'}
        %i.glyphicon.glyphicon-upload
        %span= t '.start'
      %button.btn.btn-warning.cancel{type: 'reset'}
        %i.glyphicon.glyphicon-ban-circle
        %span= t '.cancel'
      %button.btn.btn-danger.delete{type: 'button'}
        %i.glyphicon.glyphicon-trash
        %span= t '.delete'
      %input.toggle{type: 'checkbox'}
        / The global file processing state
        %span.fileupload-process
    / The global progress state
    .col-lg-5.fileupload-progress.fade
      / The global progress bar
      .progress.progress-striped.active{'aria-valuemax' => '100', 'aria-valuemin' => '0', role: 'progressbar'}
        .progress-bar.progress-bar-success{style: 'width:0%;'}
      / The extended global progress state
      .progress-extended &nbsp;
  / The table listing the files available for upload/download
  %table.table.table-striped{role: 'presentation'}
    %tbody.files